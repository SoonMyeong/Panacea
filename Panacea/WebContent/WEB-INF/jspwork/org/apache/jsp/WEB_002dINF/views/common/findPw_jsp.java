/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.50
 * Generated at: 2018-05-19 03:30:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class findPw_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>비밀번호 찾기</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Do+Hyeon|Didact+Gothic\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/style.css\" />\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath() );
      out.write("/js/jquery-3.3.1.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("var findType;\r\n");
      out.write("var userId;\r\n");
      out.write("var userName;\r\n");
      out.write("var phone;\r\n");
      out.write("\r\n");
      out.write("function findCheckValidate(){\r\n");
      out.write("\t\r\n");
      out.write("\tif($(\"#userId\").val().trim().length < 4){\r\n");
      out.write("\t\talert(\"아이디를 다시 입력하세요\");\r\n");
      out.write("\t\t$(\"#userId\").val(\"\");\r\n");
      out.write("\t\t$(\"#userId\").focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif($(\"#userName\").val().trim().length < 2){\r\n");
      out.write("\t\talert(\"이름을 다시 입력해주세요\");\r\n");
      out.write("\t\t$(\"#userName\").val(\"\");\r\n");
      out.write("\t\t$(\"#userName\").focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tvar regExp = /^[0-9]{11}$/;\r\n");
      out.write("\tif(!regExp.test($(\"#phone\").val().trim())){\r\n");
      out.write("\t\talert(\"전화번호를 다시 입력해주세요\");\r\n");
      out.write("\t\t$(\"#phone\").val(\"\");\r\n");
      out.write("\t\t$(\"#phone\").focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\treturn true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function findCheck(){\r\n");
      out.write("\t\r\n");
      out.write("\tvar bool = findCheckValidate();\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"[name=findType]\").each(function(){\r\n");
      out.write("\t\tif($(this).is(\":checked\")){\r\n");
      out.write("\t\t\tfindType = $(this).val();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\tconsole.log(findType);\r\n");
      out.write("\tuserId = $(\"#userId\").val().trim();\r\n");
      out.write("\tuserName = $(\"#userName\").val().trim();\r\n");
      out.write("\tphone = $(\"#phone\").val().trim();\r\n");
      out.write("\t\r\n");
      out.write("\tif(bool){\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl:\"");
      out.print(request.getContextPath());
      out.write("/common/findPwCheck\",\r\n");
      out.write("\t\t\tdataType:\"json\",\r\n");
      out.write("\t\t\tdata:\"findType=\"+findType+\"&userId=\"+userId+\"&userName=\"+userName+\"&phone=\"+phone,\r\n");
      out.write("\t\t\ttype:\"post\",\r\n");
      out.write("\t\t\tsuccess:function(data){\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(data == 1){\r\n");
      out.write("\t\t\t\t\t$(\"#find-title\").text(\"비밀번호 변경\");\r\n");
      out.write("\t\t\t\t\t$(\"#find-wrapper\").css(\"display\",\"none\");\r\n");
      out.write("\t\t\t\t\t$(\"#pw-wrapper\").css(\"display\",\"initial\");\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\talert(\"검색된 회원이 없습니다.\");\r\n");
      out.write("\t\t\t\t\tself.close();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror:function(jqxhr,textStatus,errorThrown){\r\n");
      out.write("\t\t\t\tconsole.log(\"ajax 에러!\");\r\n");
      out.write("\t\t\t\tconsole.log(jqxhr);\r\n");
      out.write("\t\t\t\tconsole.log(textStatus);\r\n");
      out.write("\t\t\t\tconsole.log(errorThrown);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function findPwValidate(){\r\n");
      out.write("\t\r\n");
      out.write("\tvar regExp = /^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&*+=-]).*$/g;\r\n");
      out.write("\tif(!regExp.test($(\"#password\").val())){\r\n");
      out.write("\t\talert(\"비밀번호는 8~15글자이며 특수문자,영대소문자 포함하여야 합니다\");\r\n");
      out.write("\t\t$(\"#userPw\").val(\"\");\r\n");
      out.write("\t\t$(\"#userPw\").focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif($(\"#password\").val() != $(\"#new_password\").val()){\r\n");
      out.write("\t\talert(\"비밀번호와 비밀번호 확인이 동일하지 않습니다\");\r\n");
      out.write("\t\t$(\"#new_password\").val(\"\");\r\n");
      out.write("\t\t$(\"#new_password\").focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#findType2\").attr(\"value\",findType);\r\n");
      out.write("\t$(\"#userId2\").attr(\"value\",userId);\r\n");
      out.write("\treturn true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<body id=\"popup\">\r\n");
      out.write("\t<h3 id=\"find-title\">비밀번호 찾기</h3>\r\n");
      out.write("\t<hr id=\"part-partition\">\r\n");
      out.write("\t\r\n");
      out.write("\t<div id=\"find-wrapper\">\r\n");
      out.write("\t<table id=\"find-table\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td colspan=\"2\">\r\n");
      out.write("\t\t\t\t<input type=\"radio\" name=\"findType\" id=\"patient\" value=\"patient\" checked >\r\n");
      out.write("\t\t\t\t<label for=\"patient\">환자</label>\r\n");
      out.write("\t\t\t\t<input type=\"radio\" name=\"findType\" id=\"doctor\" value=\"doctor\" >\r\n");
      out.write("\t\t\t\t<label for=\"doctor\">의사</label>\r\n");
      out.write("\t\t\t\t<input type=\"radio\" name=\"findType\" id=\"admin\" value=\"admin\" >\r\n");
      out.write("\t\t\t\t<label for=\"admin\">관리자</label>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>아이디</th>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<input type=\"text\" name=\"userId\" id=\"userId\">\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>이름</th>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<input type=\"text\" name=\"userName\" id=\"userName\">\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>전화번호</th>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<input type=\"text\" name=\"phone\" id=\"phone\" placeholder=\"'-'없이 숫자만 입력하세요.\">\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td colspan=\"2\">\r\n");
      out.write("\t\t\t\t<input type=\"button\" id=\"find-submit\" value=\"비밀번호 찾기\" onclick=\"findCheck();\">\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div id=\"pw-wrapper\">\r\n");
      out.write("\t\t<form action=\"");
      out.print(request.getContextPath());
      out.write("/common/findPwEnd\" method=\"post\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"findType\" id=\"findType2\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"userId\" id=\"userId2\">\r\n");
      out.write("\t\t<table id=\"find-table\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>비밀번호</th>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"password\" id=\"password\">\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>비밀번호 확인</th>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"new_password\" id=\"new_password\">\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td colspan=\"2\">\r\n");
      out.write("\t\t\t\t\t<input type=\"submit\" id=\"find-update-submit\" value=\"비밀번호 수정\" onclick=\"return findPwValidate();\">\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("<style>\r\n");
      out.write("div#pw-wrapper{\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
